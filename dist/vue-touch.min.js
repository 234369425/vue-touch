!function(e,t){"object"==typeof exports&&"undefined"!=typeof module?t():"function"==typeof define&&define.amd?define(t):t()}(this,function(){"use strict";function e(e){return e.charAt(0).toUpperCase()+e.slice(1)}function t(e){var t=e.direction;if("string"==typeof t){var i="DIRECTION_"+t.toUpperCase();r.indexOf(t)>-1&&n.hasOwnProperty(i)?e.direction=n[i]:console.warn("[vue-touch] invalid direction: "+t)}return e}var n,i=["pan","panstart","panmove","panend","pancancel","panleft","panright","panup","pandown","pinch","pinchstart","pinchmove","pinchend","pinchcancel","pinchin","pinchout","press","pressup","rotate","rotatestart","rotatemove","rotateend","rotatecancel","swipe","swipeleft","swiperight","swipeup","swipedown","tap"],o={pan:"pan",panstart:"pan",panmove:"pan",panend:"pan",pancancel:"pan",panleft:"pan",panright:"pan",panup:"pan",pandown:"pan",pinch:"pinch",pinchstart:"pinch",pinchmove:"pinch",pinchend:"pinch",pinchcancel:"pinch",pinchin:"pinch",pinchout:"pinch",press:"press",pressup:"press",rotate:"rotate",rotatestart:"rotate",rotatemove:"rotate",rotateend:"rotate",rotatecancel:"rotate",swipe:"swipe",swipeleft:"swipe",swiperight:"swipe",swipeup:"swipe",swipedown:"swipe",tap:"tap"},r=["up","down","left","right","horizontal","vertical","all"],a={},s=!1,p={config:{},customEvents:a};p.component={props:{tapOptions:{type:Object,default:function(){return{}}},panOptions:{type:Object,default:function(){return{}}},pinchOptions:{type:Object,default:function(){return{}}},pressOptions:{type:Object,default:function(){return{}}},rotateOptions:{type:Object,default:function(){return{}}},swipeOptions:{type:Object,default:function(){return{}}},tag:{type:String,default:"div"}},mounted:function(){this.hammer=new n.Manager(this.$el),this.recognizers={},this.setupRecognizers()},destroyed:function(){this.hammer.destroy()},methods:{setupRecognizers:function(){this.setupBuiltinRecognizers(),this.setupCustomRecognizers()},setupBuiltinRecognizers:function(){for(var e=this,t=0;t<i.length;t++){var n=i[t];if(e._events[n]){var r=o[n],a=Object.assign({},p.config[r],e[r+"Options"]);e.addRecognizer(r,a),e.addEvent(n)}}},setupCustomRecognizers:function(){for(var e=this,t=Object.keys(a),n=0;n<t.length;n++){var i=t[n];if(e._events[i]){var r=(o[i],a[i]),s=e[i+"Options"]||{},p=Object.assign({},r,s);e.addRecognizer(i,p,{mainGesture:p.type}),e.addEvent(i)}}},addRecognizer:function(i,o,r){void 0===r&&(r={});var a=r.mainGesture;if(!this.recognizers[i]){var s=new(n[e(a||i)])(t(o));this.recognizers[i]=s,this.hammer.add(s),s.recognizeWith(this.hammer.recognizers)}},addEvent:function(e){var t=this;this.hammer.on(e,function(n){return t.$emit(e,n)})},enable:function(e){this.recognizers[e].set({enable:!0})},disable:function(e){this.recognizers[e].set({enable:!1})},enableAll:function(e){this.toggleAll({enable:!0})},disableAll:function(e){this.toggleAll({enable:!1})},toggleAll:function(e){for(var t=this,n=e.enable,i=Object.keys(this.recognizers),o=0;o<i.length;o++){var r=t.recognizers[i[o]];r.set({enable:n})}}},render:function(e){return e(this.tag,{},this.$slots.default)}},p.install=function(e,t){if(void 0===t&&(t={}),!t.hammer&&!window.Hammer)return void console.warn("\n      [vue-touch] Hammer constructor not found. Either make it available globally,\n      or pass it as an option to the plugin: Vue.use(VueTouch, {hammer: Hammer})\n      notice the lowercase property key!\n    ");var i=t.name||"v-touch";n=t.hammer||window.Hammer,e.component(i,Object.assign(this.component,{name:i})),s=!0},p.registerCustomEvent=function(e,t){return void 0===t&&(t={}),s?void console.warn("\n      [vue-touch]: Custom Event '"+e+"' couldn't be added to vue-touch.\n      Custom Events have to be registered before installing the plugin.\n      "):(t.event=e,a[e]=t,void(p.component.props[e+"Options"]={type:Object,default:function(){return{}}}))},"object"==typeof exports?module.exports=p:"function"==typeof define&&define.amd?define([],function(){return p}):window.Vue&&(window.VueTouch=p,Vue.use(p))});
